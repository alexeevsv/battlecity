var Enum = require("enum");

function Player(x, y, playerNumber) {
    this.alive = true;
    this.playerNumber = playerNumber;
    this.hashCode;
    this.position = {x: x, y: y};
    this.prevPosition = {x: x, y: y};
    this.direction = this.prevDirection = "up";
    this.canFire = true;
    this.fireInterval = 350;
    this.score = 0;
    this.lastUpdate = 0;
    this.hitPoints = Enum.playerHp;
    this.armor = Enum.playerArmor;
    this.invincible = false;
    this.currentWeapon = Enum.weapons.cannon;
    this.playerName = "p" + playerNumber;
    this.host = false;
    this.avgPing = 0;
    this.pings = [];

    this.addPing = function(value){
        if(this.pings.length > 40){
            this.pings.shift();
        }
        this.pings.push(value);
    }

    this.getAvgPing = function(){
        var sum = this.pings.reduce(function(pv, cv) { return pv + cv; }, 0),
            avg = parseInt(sum / this.pings.length)
        return avg;
    }

    this.setArmor = function (value) {
        this.armor += value;
        if (this.armor > 100) {
            this.armor = 100;
        }
    }

    this.setHitPoints = function (value) {
        this.hitPoints += value;
        if (this.hitPoints > 100) {
            this.hitPoints = 100;
        }
    }

    this.applyBonus = function (bonusName) {
        switch(bonusName){
            case Enum.bonuses.heart.title:
                this.setHitPoints(Enum.bonuses.heart.value);
                break;
            case Enum.bonuses.shield.title:
                this.setArmor(Enum.bonuses.shield.value);
                break;
        }
    }

    this.shot = function (damage) {
        var tempArmor;
        if (this.invincible === false) {
            tempArmor = this.armor - damage;
            if (tempArmor < 0) {
                this.armor = 0;
                this.hitPoints += tempArmor;
                if (this.hitPoints <= 0) {
                    this.alive = false;
                    this.hitPoints = 0;
                    console.log("player_" + this.playerNumber + " died");
                }
            } else {
                this.armor = tempArmor
            }
        }
        return false;
    }

    this.reload = function (position) {
        this.alive = true;
        this.armor = Enum.playerArmor;
        this.hitPoints = Enum.playerHp;
        this.currentWeapon = Enum.weapons.cannon;
        this.position.x = this.prevPosition.x = position.x;
        this.position.y = this.prevPosition.y = position.y;
        this.invincible = false;
    }

}


module.exports = Player;