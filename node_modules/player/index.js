var Enum = require("enum"),
    _utils = require("_utils");

function Player(x, y, playerNumber) {
    this.alive = true;
    this.playerNumber = playerNumber;
    this.hashCode;
    this.position = {x: x, y: y};
    this.prevPosition = {x: x, y: y};
    this.direction = this.prevDirection = "up";
    this.canFire = true;
    this.fireInterval = 350;
    this.score = 0;
    this.lastUpdate = 0;
    this.hitPoints = Enum.playerHp;
    this.armor = Enum.playerArmor;
    this.invincible = false;
    this.currentWeapon = Enum.weapons.cannon;
    this.playerName = "p" + playerNumber;
    this.host = false;
    this.pings = [];
    this.inventory = {};
    this.invincibleTimeout;

    this.inventory.cannon = Enum.startAmmo.cannon;
    this.inventory.mine = Enum.startAmmo.mine;

    this.addAmmo = function (weapon, ammoAmount) {
        if (this.ammo[weapon] === undefined) {
            this.ammo[weapon] = 0;
        }
        this.ammo[weapon] += ammoAmount;
    }

    this.figureNextWeapon = function () {
        var weapons = Object.keys(this.inventory),
            weaponIndex = weapons.indexOf(this.currentWeapon);

        if (weapons.length > 0) {
            weaponIndex = (weaponIndex + 1 > weapons.length - 1) ? 0 : weaponIndex + 1;
            return  weapons[weaponIndex];
        }

        return undefined;
    }

    this.checkAmmo = function () {
        if (this.inventory[this.currentWeapon] <= 0) {
            delete this.inventory[this.currentWeapon];
            this.switchWeapon();
        }
    }


    this.switchWeapon = function () {
        this.currentWeapon = this.figureNextWeapon();
    }

    this.addPing = function (value) {
        if (this.pings.length > 40) {
            this.pings.shift();
        }
        this.pings.push(value);
    }

    this.getAvgPing = function () {
        var sum = this.pings.reduce(function (pv, cv) {
                return pv + cv;
            }, 0),
            avg = parseInt(sum / this.pings.length)
        return avg;
    }

    this.setArmor = function (value) {
        this.armor += value;
        if (this.armor > 100) {
            this.armor = 100;
        }
    }

    this.setHitPoints = function (value) {
        this.hitPoints += value;
        if (this.hitPoints > 100) {
            this.hitPoints = 100;
        }
    }

    this.applyBonus = function (bonusName) {
        var crateBonus;

        switch (bonusName) {
            case Enum.bonuses.heart.title:
                this.setHitPoints(Enum.bonuses.heart.value);
                break;
            case Enum.bonuses.shield.title:
                this.setArmor(Enum.bonuses.shield.value);
                break;
            case Enum.bonuses.crate.title:
                crateBonus = this.getBonusFromCrate();
                switch (crateBonus) {
                    case Enum.weapons.cannon:
                    case Enum.weapons.mine:
                        if (this.inventory[crateBonus] === undefined) {
                            this.inventory[crateBonus] = 0;
                        }
                        this.inventory[crateBonus] += Enum.crateBonuses[crateBonus].value;
                        break;
                    case Enum.crateBonuses.invincibility.title:
                        this.setInvincible();
                        break;
                }
                break;
        }
        return crateBonus;
    }

    this.setInvincible = function () {
        var self = this;

        self.invincible = true;
        clearTimeout(self.invincibleTimeout);
        self.invincibleTimeout = setTimeout(function () {
            self.invincible = false;
        }, 20000)
    }

    this.getBonusFromCrate = function () {
        var rnd = parseInt(Math.random() * 100),
            percents = 0,
            bonus;

        for (var key in Enum.crateBonuses) {
            if (Enum.crateBonuses.hasOwnProperty(key)) {
                bonus = Enum.crateBonuses[key];
                if (rnd <= bonus.chance + percents) {
                    return bonus.title;
                } else {
                    percents += bonus.chance;
                }
            }
        }
        return Enum.weapons.cannon;
    }

    this.shot = function (damage) {
        var tempArmor;
        if (this.invincible === false) {
            tempArmor = this.armor - damage;
            if (tempArmor < 0) {
                this.armor = 0;
                this.hitPoints += tempArmor;
                if (this.hitPoints <= 0) {
                    this.alive = false;
                    this.hitPoints = 0;
                    console.log("player_" + this.playerNumber + " died");
                }
            } else {
                this.armor = tempArmor
            }
        }
        return false;
    }

    this.reload = function (position) {
        this.alive = true;
        this.armor = Enum.playerArmor;
        this.hitPoints = Enum.playerHp;
        this.currentWeapon = Enum.weapons.cannon;
        this.position.x = this.prevPosition.x = position.x;
        this.position.y = this.prevPosition.y = position.y;
        this.invincible = false;
        this.inventory = {cannon: Enum.startAmmo.cannon, mine: Enum.startAmmo.mine};
        this.currentWeapon = Enum.weapons.cannon;
    }

}


module.exports = Player;